##########
# Sphinx #
##########

snippet linkc "sphinx link class" w
:py:class:\`${1} <${2}>\`
endsnippet

snippet linkf "sphinx link function" w
:py:func:\`${1} <${2}>\`
endsnippet

snippet linkm "sphinx link method" w
:py:meth:\`${1} <${2}>\`
endsnippet

###########
# general #
###########

snippet main "__main__" w
if __name__ == "__main__":
	${1}
endsnippet

snippet currpath "get current directory with os" w
dir = os.path.dirname(os.path.abspath(__file__))
${1}
endsnippet

##############
# matplotlib #
##############

snippet matplot "Setup matplotlib" w
# Set up parameters
plt.rcParams.update(
	{"text.usetex": True, "font.family": "IosevkaTerm Nerd Font", "figure.dpi": 100}
)
# Define figure
px = 1 / plt.rcParams["figure.dpi"]  # pixel to inches
fig = plt.figure(figsize=(600 * px, 200 * px))
# Define three subplots
ax = fig.subplots(1, 3, squeeze=False)
${1}
plt.show()
endsnippet

snippet ppolyline "Plot polyline using matplotlib" w
for i in range(edgs.shape[0]):
	ax1.plot(
		[vs[edgs[i, 0], 0], vs[edgs[i, 1], 0]],
		[vs[edgs[i, 0], 1], vs[edgs[i, 1], 1]],
		"b",
	)
${1}
endsnippet

#########
# pyddg #
#########

snippet quadric "pyddg quadrics" w
Q = quadrics.Quadric(np.diag([${1}]))
Q_snet = ddg.to_smooth_net(Q)
Q_dnet = ddg.sample_smooth_net(Q_snet, sampling=[${2}])
ddg.to_blender_object(Q_dnet, attributes={"name":"Quadric"})
endsnippet

snippet bslider "blender custom properties" w
from functools import partial
import ddg.visualization.blender.props as props
callback = props.clear_callback("construction", blender_objects)
properties = {
"x": partial(bpy.props.FloatProperty, default=, soft_min=, soft_max=, min=, max=),
"y": partial(bpy.props.IntProperty, default=, soft_min=, soft_max=, min=, max=),
"z": partial(bpy.props.BoolProperty, default=),
}
props.add_props_with_callback_from_constructors(callback, properties, {})
endsnippet
